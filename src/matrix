#!/Users/user/PythonProjects/Numerolog_free/.venv/bin/python3.13
from loguru import logger
from pathlib import Path
import os
from typing import Dict

from config.settings import INFO_FILE, DEBUG_FILE, ERROR_FILE
from config.settings import TEMPLATES_PATH, PDF_PATH
from classes.arcanes_classes import Client, Star, Pifagor, Money
from text_storage.DB_star_dict import star_dict

from src.clients_info import get_client_info
from src.pages_from_arcanes import get_star_content, get_pifagor_content
from src.pages_from_arcanes import get_money_content
from src.pages_from_analitics import get_star_analitics
from src.utils.create_pdf_pages import get_pdf_star


# Функция для настройки логгера
def configure_logger():
    """
    Настройка логгера с использованием трех уровней: INFO, DEBUG, ERROR.
    Логи сохраняются в файлы с автоматическим разбиением по размеру (10 MB).
    """
    logger.remove()  # Удаляем все предыдущие конфигурации логгера
    logger.add(
        INFO_FILE,
        format="{time:DD-MM-YYYY at HH:mm:ss} | {level} | {message}",
        level="INFO",
        filter=lambda record: record["level"].name == "INFO",
        rotation="10 MB",
    )
    logger.add(
        DEBUG_FILE,
        format="{time:DD-MM-YYYY at HH:mm:ss} | {level} | {message}",
        level="DEBUG",
        filter=lambda record: record["level"].name == "DEBUG",
        rotation="10 MB",
    )
    logger.add(
        ERROR_FILE,
        format="{time:DD-MM-YYYY at HH:mm:ss} | {level} | {message}",
        level="ERROR",
        filter=lambda record: record["level"].name == "ERROR",
        rotation="10 MB",
    )


# Основная функция программы
@logger.catch
def main():
    """
    Главная функция программы. Выполняет следующие шаги:
    1. Настройка логгера.
    3. Получение данных клиента.
    4. Создание арканов для шаблонов.
    5. Генерация профайлингов звезды и денежного треугольника.
    """
    # Настройка логгера
    configure_logger()

    # Получение данных клиента
    logger.info("Получение данных клиента...")
    client_info = get_client_info()
    logger.debug(f'Имя и ДР клиента {client_info}')

    # Создание контекста для шаблонов страниц
    logger.info("Создание контента страниц...")

    logger.info("Создание контента страницы star")
    client_star = Star(client_info)
    logger.debug(f'{client_star}')

    page_star_content = get_star_content(star=client_star)
    logger.debug(f'{page_star_content}')
    logger.info("Завершение создания контента страницы star")

    logger.info("Создание pdf страницы star...")
    result = get_pdf_star(
        page_star_content=page_star_content,
        templates=TEMPLATES_PATH,
        output=PDF_PATH
    )
    logger.info("Завершение создания pdf страницы star")

    logger.info("Создание аналитика арканов со страницы star...")
    star_analytics = get_star_analitics(
        star=client_star,
        star_dict=star_dict
    )
    logger.debug(f'{star_analytics}')
    logger.info("Завершение аналитики арканов со страницы star")

    logger.info("Создание контента страницы pifagor")
    client_pifagor = Pifagor(client_star)
    logger.debug(f'{client_pifagor}')

    page_pifagor_content = get_pifagor_content(pifagor=client_pifagor)
    logger.debug(f'{page_pifagor_content}')
    logger.info("Завершение создания контента страницы pifagor")

    logger.info("Создание контента страницы money")
    client_money = Money(client_star)
    logger.debug(f'{client_money}')

    page_money_content = get_money_content(money=client_money)
    logger.debug(f'{page_money_content}')
    logger.info("Завершение создания контента страницы money")

    logger.info("Завершение создания контента страниц")
    # Завершение работы программы
    logger.info("Программа успешно завершила работу.")
#


# Точка входа в программу
if __name__ == "__main__":
    main()
